/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  SettingTab: () => SettingTab,
  default: () => MyTaskPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/CreateTaskNote.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/Notifs.ts
var Notifications = class {
  constructor(vault) {
    this.vault = vault;
  }
  send_notif(message = `This is a test notification`, test) {
    new Notification(`Test Notif`, { body: message, requireInteraction: true });
  }
};

// src/Parser.ts
var import_obsidian = __toModule(require("obsidian"));
var Parser = class {
  constructor(vault, settings) {
    this.vault = vault;
    this.settings = settings;
  }
  parse_for_tasks() {
    return __async(this, null, function* () {
      let Regex = RegExp(/(?<=^\-\s\[\s\]\s)\d+(\-|\/)\d+(\-|\/)\d+\s(\w+(\s|$))+$/gm);
      this.notifications = new Notifications(this.vault);
      const yesterday_file = (0, import_obsidian.normalizePath)(this.settings.CustomFolder + `/` + (0, import_obsidian.moment)().subtract(1, "days").format(this.settings.DateFormat) + `-` + this.settings.CustomFile + `.md`);
      const normalizedFileName = (0, import_obsidian.normalizePath)(this.settings.CustomFolder + `/` + (0, import_obsidian.moment)(new Date()).format(this.settings.DateFormat) + `-` + this.settings.CustomFile + `.md`);
      let new_contents = `## Task Planner`;
      if (yield this.vault.adapter.exists(yesterday_file, false)) {
        let file_contents = (yield this.vault.adapter.read(yesterday_file)).match(Regex);
        if (!file_contents) {
          this.notifications.send_notif("No Tasks in yesterdays note");
        } else {
          this.notifications.send_notif("THERE ARE TASKS" + file_contents[0]);
          for (let i = 0; i <= file_contents.length; i++) {
            let task_date = yield file_contents[i].match(/\d+/g);
            let date_string = task_date[0] + task_date[1] + task_date[2];
            let task_string = yield file_contents[i].match(/(?<=\d+(\-|\/)\d+(\-|\/)\d+\s)(\w+(\s|(?:$)))+(?:$)/);
            if (date_string != (0, import_obsidian.moment)().format(this.settings.DateFormat)) {
              new import_obsidian.Notice("No date" + date_string);
            }
            if (date_string == (0, import_obsidian.moment)().format(this.settings.DateFormat)) {
              this.notifications.send_notif("TASK DUE TODAY (" + date_string + "): " + task_string[0]);
              new import_obsidian.Notice("Date" + date_string);
            }
            new_contents = new_contents + `
- [ ] ` + file_contents[i];
            this.notifications.send_notif(new_contents);
            this.vault.adapter.write(normalizedFileName, new_contents);
          }
        }
      } else {
        this.notifications.send_notif("No File Exists");
      }
    });
  }
};

// src/CreateTaskNote.ts
var FileCreator = class {
  constructor(vault, app, settings) {
    this.vault = vault;
    this.app = app;
    this.settings = settings;
    this.parser = new Parser(this.vault, this.settings);
  }
  createFileIfNotExists(fileName) {
    return __async(this, null, function* () {
      this.notifications = new Notifications(this.vault);
      yield this.createFolderIfNotExists(this.settings.CustomFolder);
      try {
        const normalizedFileName = (0, import_obsidian2.normalizePath)(this.settings.CustomFolder + `/` + (0, import_obsidian2.moment)(new Date()).format(this.settings.DateFormat) + `-` + fileName + `.md`);
        if (!(yield this.vault.adapter.exists(normalizedFileName, false))) {
          yield this.vault.create(normalizedFileName, `## TAslks
- [ ] `);
          this.notifications.send_notif(normalizedFileName);
          this.open_note(this.settings.CustomFile);
          this.parser.parse_for_tasks();
        } else {
          this.notifications.send_notif(`File ${normalizedFileName} already exists`, true);
        }
      } catch (error) {
        this.notifications.send_notif(`Error ${error}`);
      }
    });
  }
  createFolderIfNotExists(folderName) {
    return __async(this, null, function* () {
      try {
        const normalizedPath = (0, import_obsidian2.normalizePath)(folderName);
        const folderExists = yield this.vault.adapter.exists(normalizedPath, false);
        if (!folderExists) {
          yield this.vault.createFolder(normalizedPath);
        }
      } catch (error) {
        new import_obsidian2.Notice(error);
      }
    });
  }
  open_note(note = `Task_Planner`) {
    return __async(this, null, function* () {
      try {
        if (yield this.vault.adapter.exists(yield (0, import_obsidian2.normalizePath)(this.settings.CustomFolder + `/` + (0, import_obsidian2.moment)(new Date()).format(this.settings.DateFormat) + `-` + note + `.md`), false)) {
          new import_obsidian2.Notice("File exists ... opening");
          yield this.app.workspace.openLinkText(this.settings.CustomFolder + `/` + (0, import_obsidian2.moment)(new Date()).format(this.settings.DateFormat) + `-` + note + `.md`, "", true, {
            active: true
          });
        } else {
          new import_obsidian2.Notice("File doesn't exist .... Creating file");
          this.createFileIfNotExists(note);
        }
      } catch (error) {
        this.notifications.send_notif(`Error ${error}`);
      }
    });
  }
};

// src/Settings.ts
var SETTINGS = class {
  constructor() {
    this.OpenOnStart = false;
    this.SideButton = false;
    this.SendNotifs = false;
    this.CustomFolder = "TaskPlanners";
    this.CustomFile = "Task_Planner";
    this.DateFormat = "DDMMYYYY";
    this.StatusBar = false;
  }
};

// src/main.ts
var MyTaskPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.ribbonIconEl = void 0;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign(new SETTINGS(), yield this.loadData());
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.add_side_button();
      this.vault = this.app.vault;
      this.notifications = new Notifications(this.vault);
      this.filecreator = new FileCreator(this.vault, this.app, this.settings);
      this.notifications.send_notif(`${this.settings.OpenOnStart}, ${this.settings.SideButton}, ${this.settings.CustomFolder}, ${this.settings.DateFormat}`);
      this.addSettingTab(new SettingTab(this.app, this));
      this.addCommand({
        id: "open_task_planner",
        name: "Open Task Planner Note",
        callback: () => {
          new import_obsidian3.Notice("opening file", 0.2);
          this.filecreator.open_note();
        }
      });
      this.addCommand({
        id: "create_task_note",
        name: "Create a Task Planner Note",
        callback: () => {
          this.filecreator.createFileIfNotExists(this.settings.CustomFile);
        }
      });
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  add_side_button() {
    var _a;
    (_a = this.ribbonIconEl) == null ? void 0 : _a.remove();
    if (this.settings.SideButton) {
      this.ribbonIconEl = this.addRibbonIcon("crossed-star", "Open Task Planner", (evt) => {
        new import_obsidian3.Notice("opening file");
        this.filecreator.open_note(this.settings.CustomFile);
      });
    }
  }
};
var SettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Task Planner Settings" });
    new import_obsidian3.Setting(containerEl).setName("Open on Start").setDesc("Open the Task Note on startup").addToggle((toggle) => toggle.setValue(this.plugin.settings.OpenOnStart).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.OpenOnStart = value;
      this.plugin.notifications.send_notif(`This is the on start setting `, this.plugin.settings.OpenOnStart);
      this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Side Bar Button").setDesc("Add a side bar button to open the Task Note").addToggle((toggle) => toggle.setValue(this.plugin.settings.SideButton).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.SideButton = value;
      this.plugin.notifications.send_notif(`This is the sidebutton setting `, this.plugin.settings.SideButton);
      this.plugin.add_side_button();
      this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Custom Folder").setDesc("Set a custom folder to save the task notes in").addText((text) => text.setPlaceholder("Folder").setValue(this.plugin.settings.CustomFolder).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.CustomFolder = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Date Format").setDesc("Date format for file name and task due dates\nDates in preexisting files need to be changed manually\nAutomatic date fixing coming soon").addText((text) => text.setPlaceholder("Date").setValue(this.plugin.settings.DateFormat).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.DateFormat = value;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
